apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "robokop-ui-v2.fullname" . }}-configmap
  labels:
    {{- include "robokop-ui-v2.labels" . | nindent 4 }}
data:
  check_neo.sh: |-
    #!/bin/sh
    response=$(wget --no-check-certificate --server-response --spider --quiet "http://${NEO4J_HOST}:${NEO4J_HTTP_PORT}" 2>&1 | awk 'NR==1{print $2}')
    until [ "$response" = "200" ]; do
        response=$(wget --no-check-certificate --server-response --spider --quiet "http://${NEO4J_HOST}:${NEO4J_HTTP_PORT}" 2>&1 | awk 'NR==1{print $2}') >&2
        echo "  -- Neo4j  is unavailable - sleeping"
        sleep 3
    done
  download_data.sh: |-
    #!/bin/bash
    set -x
    wget -O /data/db.dump --no-check-certificate ${NEO4J_DATA_URL}
  seed_db.sh: |-
    #!/bin/bash
    set -x
    FILE=/data/db.dump
    DATADIR=/data/databases
    until [ -f "$FILE" ]; do
        echo "$FILE doesn't exist. Please copy to database dump file to $FILE"
        echo "sleeping..."
        sleep 3
    done
    echo "$FILE found"
    rm -f $DONE
    echo "clearing previous database file if any..."
    rm -rf $DATADIR
    mkdir -p /data/databases
    # load dump file
    neo4j-admin load --from $FILE

  nginx.conf: |-
    worker_processes auto;

    events {
    }

    http {
            # Define log format without parameters
            log_format combined_no_query '$remote_addr - $remote_user [$time_local] '
                    '"$uri" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

            # Use internal Docker DNS Server for resolving
            # IP addresses
                resolver 127.0.0.1;

            # Disable caching
            if_modified_since off;

            server {

        # Disable timeouts, some ARAs might take a while
        proxy_read_timeout 1d;
        proxy_connect_timeout 1d;
        proxy_send_timeout 1d;

                    client_max_body_size 0;
                    listen       80;
                    server_name  localhost;

        # Return 500 errors as JSON
        include json_error.conf;

                    location / {
                            set     $url http://robokop-ui-v2-frontend:80;
                            proxy_pass $url;
                    }

                    location ~ /api/queryDispatcher/(.*) {
                            set     $url http://robokop-ui-v2-queryDispatcher:80/;
                            proxy_pass $url$1$is_args$args;
                    }

                    location ~ /api/robokache/(.*) {
                            set     $url http://robokop-ui-v2-robokache:80/api/;
                            proxy_pass $url$1$is_args$args;
                    }

                    location ~ /api/external/nodeNormalization/(.*) {
                            set $url https://nodenormalization-sri.renci.org/;
                            proxy_pass $url$1$is_args$args;

                            # Hide long parameters in log
                            access_log /dev/stdout combined_no_query;
                    }
            }

    }
  json_error.conf: |-
      # Handle some errors explictly
      error_page 500 /500.json;
      location /500.html{
          default_type application/json;
          return 500 '{"status": "error", "message" : "NGINX Server Error"}';
      }
      error_page 502 /502.json;
      location /502.json{
         default_type application/json;
          return 502 '{"status": "error", "message" : "NGINX Bad Gateway"}';
      }
      error_page 503 /503.json;
      location /503.json{
          default_type application/json;
          return 503 '{"status": "error", "message" : "NGINX Service Temporarily Unavailable"}';
      }
      error_page 504 /504.json;
      location /504.json{
          default_type application/json;
          return 504 '{"status": "error", "message" : "NGINX Gateway Timeout"}';
      }